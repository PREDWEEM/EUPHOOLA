name: Update Meteo History (daily)

on:
  schedule:
    # Corre todos los días a las 12:00 UTC (09:00 Argentina)
    - cron: "0 12 * * *"
  workflow_dispatch:

# Necesario para poder hacer git push con GITHUB_TOKEN
permissions:
  contents: write

# Evita que se pisen ejecuciones si justo se solapan
concurrency:
  group: update-meteo
  cancel-in-progress: false

jobs:
  autoupdate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas requests openpyxl python-dateutil pytz

      - name: Run update_meteo.py
        env:
          # Ajustá si tu endpoint fuera distinto
          METEOBAHIA_URL: https://meteobahia.com.ar/scripts/forecast/for-ol.xml
          TIMEZONE: America/Argentina/Buenos_Aires
          # Salidas: repo + app (tu script ya las usa)
          GH_PATH: data/meteo_daily.csv
          APP_HISTORY_PATH: meteo_history.csv
          PRON_DIAS_API: "8"
        run: |
          python update_meteo.py

      - name: Check gaps in repo history (logs only)
        if: always()
        run: |
          python - << 'PY'
          import pandas as pd, pathlib, sys
          p = pathlib.Path("data/meteo_daily.csv")
          if not p.exists():
            print("[WARN] data/meteo_daily.csv no existe; no puedo chequear huecos.")
            sys.exit(0)
          df = pd.read_csv(p, parse_dates=["date"])
          if df.empty:
            print("[WARN] CSV vacío.")
            sys.exit(0)
          df = df.dropna(subset=["date"]).sort_values("date").reset_index(drop=True)
          rng = pd.date_range(df["date"].min().normalize(), df["date"].max().normalize(), freq="D")
          have = set(d.normalize() for d in df["date"])
          missing = [d.date().isoformat() for d in rng if d.normalize() not in have]
          if missing:
            print(f"[GAPS] Faltan {len(missing)} fecha(s) entre {rng[0].date()} y {rng[-1].date()}:")
            print(", ".join(missing))
          else:
            print("[OK] Sin huecos de fechas en el histórico.")
          PY

      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add data/meteo_daily.csv || true
          git add meteo_history.csv || true
          git status --porcelain
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Auto-update meteo history ($(date -u +'%Y-%m-%d %H:%M UTC'))"
            git push
          fi
